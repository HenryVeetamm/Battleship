// <auto-generated />
using System;
using DAL;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace DAL.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    partial class ApplicationDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("ProductVersion", "5.0.12")
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("Domain.Coordinate", b =>
                {
                    b.Property<int>("CoordinateId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("ShipId")
                        .HasColumnType("int");

                    b.Property<int>("X")
                        .HasColumnType("int");

                    b.Property<int>("Y")
                        .HasColumnType("int");

                    b.HasKey("CoordinateId");

                    b.HasIndex("ShipId");

                    b.ToTable("Coordinates");
                });

            modelBuilder.Entity("Domain.Game", b =>
                {
                    b.Property<int>("GameId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("BombMoveHistory")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("CurrentPlayer")
                        .HasColumnType("int");

                    b.Property<DateTime>("DateTime")
                        .HasColumnType("datetime2");

                    b.Property<int?>("EMoveAfterHit")
                        .HasColumnType("int");

                    b.Property<int?>("EShipTouchRule")
                        .HasColumnType("int");

                    b.Property<int>("GameBoard1Id")
                        .HasColumnType("int");

                    b.Property<int>("GameBoard2Id")
                        .HasColumnType("int");

                    b.Property<string>("GameName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("InDatabase")
                        .HasColumnType("bit");

                    b.Property<bool>("IsGameOver")
                        .HasColumnType("bit");

                    b.Property<bool>("PredefinedGame")
                        .HasColumnType("bit");

                    b.Property<int>("SaveType")
                        .HasColumnType("int");

                    b.HasKey("GameId");

                    b.HasIndex("GameBoard1Id");

                    b.HasIndex("GameBoard2Id");

                    b.ToTable("Games");
                });

            modelBuilder.Entity("Domain.GameBoardState", b =>
                {
                    b.Property<int>("GameBoardStateId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Board")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("PlayerId")
                        .HasColumnType("int");

                    b.HasKey("GameBoardStateId");

                    b.HasIndex("PlayerId");

                    b.ToTable("GameBoardStates");
                });

            modelBuilder.Entity("Domain.Player", b =>
                {
                    b.Property<int>("PlayerId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("PlayerType")
                        .HasColumnType("int");

                    b.HasKey("PlayerId");

                    b.ToTable("Players");
                });

            modelBuilder.Entity("Domain.Ship", b =>
                {
                    b.Property<int>("ShipId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("GameBoardStateId")
                        .HasColumnType("int");

                    b.Property<int>("Height")
                        .HasColumnType("int");

                    b.Property<int>("Length")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("Placed")
                        .HasColumnType("bit");

                    b.HasKey("ShipId");

                    b.HasIndex("GameBoardStateId");

                    b.ToTable("Ships");
                });

            modelBuilder.Entity("Domain.Coordinate", b =>
                {
                    b.HasOne("Domain.Ship", "Ship")
                        .WithMany("Coordinates")
                        .HasForeignKey("ShipId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Ship");
                });

            modelBuilder.Entity("Domain.Game", b =>
                {
                    b.HasOne("Domain.GameBoardState", "GameBoard1")
                        .WithMany("Games1")
                        .HasForeignKey("GameBoard1Id")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Domain.GameBoardState", "GameBoard2")
                        .WithMany("Games2")
                        .HasForeignKey("GameBoard2Id")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("GameBoard1");

                    b.Navigation("GameBoard2");
                });

            modelBuilder.Entity("Domain.GameBoardState", b =>
                {
                    b.HasOne("Domain.Player", "Player")
                        .WithMany("GameBoardStates")
                        .HasForeignKey("PlayerId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("Player");
                });

            modelBuilder.Entity("Domain.Ship", b =>
                {
                    b.HasOne("Domain.GameBoardState", "GameBoardState")
                        .WithMany("Ships")
                        .HasForeignKey("GameBoardStateId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("GameBoardState");
                });

            modelBuilder.Entity("Domain.GameBoardState", b =>
                {
                    b.Navigation("Games1");

                    b.Navigation("Games2");

                    b.Navigation("Ships");
                });

            modelBuilder.Entity("Domain.Player", b =>
                {
                    b.Navigation("GameBoardStates");
                });

            modelBuilder.Entity("Domain.Ship", b =>
                {
                    b.Navigation("Coordinates");
                });
#pragma warning restore 612, 618
        }
    }
}
